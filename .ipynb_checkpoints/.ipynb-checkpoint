{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import numpy as np\n",
    "from datetime import  date, timedelta\n",
    "import xml.etree.ElementTree as ET\n",
    "from operator import itemgetter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "torneo = 'espana'\n",
    "url = 'https://editorialdenegocios.com/datafactory/xml/es/'+ torneo +'/deportes.futbol.'+ torneo +'.posiciones.xml'\n",
    "web = requests.get(url)\n",
    "root = ET.fromstring(web.text)\n",
    "titulocsv = f'datos{torneo}.csv'\n",
    "f = open(titulocsv,'w')\n",
    "f.write('Tabla de posiciones ; G ; E ; P ; GF ; GC ; DF ; Pts;\\n')\n",
    "for i in root.findall('equipo'):\n",
    "    f.write(i.find('nombre').text + ';' + i.find('jugados').text + ';' + i.find('empatados').text + ';' + i.find('perdidos').text +  ';' + i.find('golesfavor').text + ';' + i.find('golescontra').text + ';' + i.find('difgol').text + ';' + i.find('puntos').text +'\\n')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "url = 'https://editorialdenegocios.com/datafactory/xml/es/'+ torneo +'/deportes.futbol.'+ torneo +'.fixture.xml'\n",
    "web = requests.get(url)\n",
    "root = ET.fromstring(web.text)\n",
    "cdp=10\n",
    "f.write('\\nFecha 2\\n')\n",
    "for i in root.findall(\"fecha\"):\n",
    "    fechadesde=i.get('fechadesde')\n",
    "    fechahasta=i.get('fechahasta')\n",
    "    fechadesde=date(int(fechadesde[0:4]),int(fechadesde[4:6]),int(fechadesde[6:8]))\n",
    "    fechahasta=date(int(fechahasta[0:4]),int(fechahasta[4:6]),int(fechahasta[6:8]))\n",
    "    \n",
    "    hoy = date.today()\n",
    "    if(fechahasta2<hoy and hoy<fechadesde):\n",
    "        f.write(a.get('nombre') + \"\\n\")\n",
    "        for j in a:\n",
    "            f.write(j.find('local').attrib['nc'] + ';'+ str(j.find('goleslocal').text) +  \" a \"+ str(j.find('golesvisitante').text)+\";\"+j.find('visitante').attrib['nc'] + '\\n')\n",
    "        f.write(i.get('nombre') + \"\\n\")\n",
    "        for j in i:\n",
    "            f.write(j.find('local').attrib['nc'] + ';vs;' + j.find('visitante').attrib['nc'] + '\\n')  \n",
    "    fechadesde2=fechadesde\n",
    "    fechahasta2=fechahasta\n",
    "    a = i   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "fechadesde=i.get('fechadesde')\n",
    "fechahasta=i.get('fechahasta')\n",
    "fechadesde=date(int(fechadesde[0:4]),int(fechadesde[4:6]),int(fechadesde[6:8]))\n",
    "fechahasta=date(int(fechahasta[0:4]),int(fechahasta[4:6]),int(fechahasta[6:8]))\n",
    "hoy = date.today()\n",
    "print(fechahasta>hoy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "goleadores = np.array([0,-1,0],dtype=object)\n",
    "url = 'https://editorialdenegocios.com/datafactory/xml/es/'+ torneo +'/deportes.futbol.'+ torneo +'.jugadores.estadisticas.xml'\n",
    "web = requests.get(url)\n",
    "root = ET.fromstring(web.text)\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('Goals').attrib['total']) , i.attrib['currentTeam']]\n",
    "    goleadores = np.vstack([goleadores,np.asarray(text,object)])    \n",
    "f.write(\"\\n Goleadores \\n\")\n",
    "goleadores = sorted(goleadores, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "for i in range(5):\n",
    "    a=goleadores[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] +\"\\n\")\n",
    "\n",
    "\n",
    "pases = np.array([0,-1,0,0],dtype=object)\n",
    "f.write('\\n Pases \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('Passes').attrib['successful']) , int(i.find('Passes').attrib['total']) , i.attrib['currentTeam']]\n",
    "    pases = np.vstack([pases,np.asarray(text,object)])    \n",
    "\n",
    "pases = sorted(pases, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "for i in range(5):\n",
    "    a=pases[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + str(a[2]) + \";\" + a[3] +\"\\n\")\n",
    "\n",
    "disparos = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Disparos \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('Shots').attrib['total']) , i.attrib['currentTeam']]\n",
    "    disparos = np.vstack([disparos,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "disparos = sorted(disparos, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=disparos[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")    \n",
    "\n",
    "recuperacion = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Recuperacion \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('Stealing').attrib['total']) , i.attrib['currentTeam']]\n",
    "    recuperacion = np.vstack([recuperacion,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "recuperacion = sorted(recuperacion, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=recuperacion[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")  \n",
    "\n",
    "asistencias = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Asistencias \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('GoalAssistances').attrib['total']) , i.attrib['currentTeam']]\n",
    "    asistencias = np.vstack([asistencias,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "asistencias = sorted(asistencias, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=asistencias[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")  \n",
    "\n",
    "faltas_com = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Faltas Cometidas \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('Fouls').attrib['total']) , i.attrib['currentTeam']]\n",
    "    faltas_com = np.vstack([faltas_com,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "faltas_com = sorted(faltas_com, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=faltas_com[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")  \n",
    "\n",
    "faltas_rec = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Faltas Recibidas \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('FoulsOpponents').attrib['total']) , i.attrib['currentTeam']]\n",
    "    faltas_rec = np.vstack([faltas_rec,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "faltas_rec = sorted(faltas_rec, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=faltas_rec[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")  \n",
    "\n",
    "tar_ama = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Tarjetas Amarillas \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('YellowCards').attrib['total']) , i.attrib['currentTeam']]\n",
    "    tar_ama = np.vstack([tar_ama,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "tar_ama = sorted(tar_ama, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=tar_ama[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")  \n",
    "\n",
    "tar_roj = np.array([0,-1,0],dtype=object)\n",
    "f.write('\\n Tarjetas Rojas \\n')\n",
    "for i in root.findall('Tournament/Players/Player'):\n",
    "    text = [i.attrib['name'] + \" \" + i.attrib['lastName'], int(i.find('RedCards').attrib['total']) , i.attrib['currentTeam']]\n",
    "    tar_roj = np.vstack([tar_roj,np.asarray(text,object)])   \n",
    "\n",
    "\n",
    "tar_roj = sorted(tar_roj, key=lambda a_entry: a_entry[1], reverse=True)\n",
    "\n",
    "for i in range(5):\n",
    "    a=tar_roj[i]\n",
    "    f.write(a[0]+ \";\" +str(a[1]) + \";\" + a[2] + \"\\n\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
